<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="dataset_test.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2073"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="corrected_shoe_orders_10k" custom_title="0" dock_id="5" table="4,25:maincorrected_shoe_orders_10k"/><dock_state state="000000ff00000000fd00000001000000020000043500000307fc0100000002fb000000160064006f0063006b00420072006f00770073006500310100000000000004350000000000000000fb000000160064006f0063006b00420072006f00770073006500350100000000000004350000011100ffffff000004350000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="corrected_shoe_orders_10k" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="85"/><column index="2" value="87"/><column index="3" value="79"/><column index="4" value="58"/><column index="5" value="39"/><column index="6" value="95"/><column index="7" value="120"/><column index="8" value="93"/><column index="9" value="171"/><column index="10" value="72"/><column index="11" value="65"/><column index="12" value="54"/><column index="13" value="96"/><column index="14" value="85"/><column index="15" value="98"/><column index="16" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">--Data preparation
INSERT INTO orders(order_id, customer_id, product_id, price, quantity, customer_country, store_country, order_date)
SELECT order_id, customer_id, product_id, price, quantity, customer_country, store_country, order_date
	   FROM shoe_orders_compiled;
	   
	   
INSERT INTO customers(customer_id, customer_country, store_country, age, gender, shoe_size)
SELECT customer_id, customer_country, store_country, age, gender, shoe_size
	   FROM shoe_orders_compiled;
	   
	   
INSERT INTO products(product_id, brand, product)
SELECT product_id, brand, product
	   FROM shoe_orders_compiled;
	   
	   
INSERT INTO shipping(order_id, shipping_cost, order_date, shipping_date, delivery_date)
SELECT order_id, shipping_cost, order_date, shipping_date, delivery_date
	   FROM shoe_orders_compiled;
	   
	   
	   
--descriptive analysis

--Total order_count
CREATE VIEW total_orders AS
SELECT COUNT(*) 
	   FROM orders;
	   
	   	   
--customer_by_gender
CREATE VIEW gender_count AS
SELECT gender, 
	   COUNT(*) 
	   FROM customers
	   GROUP BY gender; 
	   
	 
--gender percent dist	 
SELECT 
  gender,
  COUNT(*) AS count_gender,
  ROUND(100.0 * COUNT(*) / SUM(COUNT(*)) OVER (), 2) AS percentage
FROM customers
GROUP BY gender;
 
	   
	   
--age_by_gender	   
CREATE VIEW customer_age AS
SELECT gender,
	   AVG(age)
	   FROM customers
	   GROUP BY gender;


--sales by channel	   
CREATE VIEW sales_bychannel AS
SELECT CASE
	     WHEN store_country = 'Online' THEN 'Online' ELSE 'Physical' END AS sales_channel,
	     SUM(price * quantity) AS sales
		 FROM orders
		 GROUP BY sales_channel
		 ORDER BY sales_channel DESC;
	   
	   
--customer_count &amp; retention_rate
CREATE VIEW KPI AS
SELECT COUNT(DISTINCT customer_id) AS total_customers,
       SUM(CASE WHEN order_count &gt; 1 THEN 1 ELSE 0 END) AS repeat_customers,
       ROUND(100.0 * SUM(CASE WHEN order_count &gt; 1 THEN 1 ELSE 0 END) / COUNT(*), 2) AS retention_rate
FROM (
  SELECT customer_id, COUNT(*) AS order_count FROM orders GROUP BY customer_id
);



--order_by_store_country
CREATE VIEW order_by_store AS
SELECT store_country,
	   COUNT(*) AS total_orders
	   FROM orders
	   GROUP BY store_country
	   ORDER BY total_orders DESC;
	   	


--sales by brand
CREATE VIEW revenue_by_brnd AS
WITH product_sales AS (
  SELECT product_id, SUM(price * quantity) AS total_sales
  FROM orders
  GROUP BY product_id
),
dedup_products AS (
  SELECT DISTINCT product_id, brand
  FROM products
)
SELECT dp.brand, SUM(ps.total_sales) AS sales
FROM product_sales ps
JOIN dedup_products dp ON ps.product_id = dp.product_id
GROUP BY dp.brand
ORDER BY sales DESC;


--order per customer
SELECT 
  ROUND(AVG(order_count), 2) AS avg_orders_per_customer,
  MIN(order_count) AS min_orders,
  MAX(order_count) AS max_orders
FROM (
  SELECT customer_id, COUNT(*) AS order_count
  FROM orders
  GROUP BY customer_id
);


--cust-dist_by order_count
CREATE VIEW retention_count AS
SELECT order_count, COUNT(*) AS num_customers
FROM (
  SELECT customer_id, COUNT(*) AS order_count
  FROM orders
  GROUP BY customer_id
)
GROUP BY order_count
ORDER BY order_count;



--who are the 12?
CREATE VIEW top12_repeat_buyers AS
WITH customer_freq AS (
  SELECT customer_id, COUNT(*) AS cnt_orders
  FROM orders
  GROUP BY customer_id
)
SELECT customer_id
FROM customer_freq
WHERE cnt_orders = 5;

SELECT * FROM top12_repeat_buyerz;


-- Demographics of the 12
SELECT
  c.customer_id,
  c.gender,
  c.age,
  o.store_country,
  o.customer_country,
  COUNT(DISTINCT c.customer_id) AS orders_placed
FROM top12_repeat_buyers t
JOIN customers c ON c.customer_id = t.customer_id
JOIN orders o ON o.customer_id = t.customer_id
GROUP BY c.customer_id
;
-- Versus overall customers
SELECT 
  c.gender,
  c.age AS age,
  o.customer_country,
  COUNT(*) AS freq
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
GROUP BY c.gender, o.customer_country;

CREATE VIEW delivery_delay_vs_repeate_rate AS
WITH delay_flag AS (
  SELECT order_id,
         CASE WHEN JULIANDAY(delivery_date)-JULIANDAY(order_date)&gt;=14 THEN 1 ELSE 0 END AS delayed
  FROM shipping
), cust_delay AS (
  SELECT o.customer_id, MIN(df.delayed) AS ever_delayed
  FROM orders o
  JOIN delay_flag df ON o.order_id=df.order_id
  join shipping s ON s.order_id = o.order_id
  GROUP BY o.customer_id
), cust_orders AS (
  SELECT customer_id, COUNT(*) AS order_cnt
  FROM orders GROUP BY customer_id
)
SELECT ever_delayed,
       ROUND(100.0*SUM(CASE WHEN order_cnt&gt;1 THEN 1 ELSE 0 END)/COUNT(*),2) AS repeat_rate
FROM cust_orders co
JOIN cust_delay cd ON co.customer_id=cd.customer_id
GROUP BY ever_delayed;


-Purchase Cadence(how many days btw purchases)
CREATE VIEW Top12_avg_days_btw_purchase AS
WITH top12 AS (
  SELECT customer_id
  FROM orders
  GROUP BY customer_id
  HAVING COUNT(*) = 5
),
cust_orders AS (
  SELECT
    o.customer_id,
    date(o.order_date) AS od,  -- ensure real date type
    LAG(date(o.order_date)) 
      OVER (
        PARTITION BY o.customer_id 
        ORDER BY date(o.order_date)
      ) AS prev_od
  FROM orders o
  JOIN top12 t 
    ON o.customer_id = t.customer_id
)
SELECT
  customer_id,
  ROUND(AVG(
    JULIANDAY(od) 
    - JULIANDAY(prev_od)
  ), 1) AS avg_days_between
FROM cust_orders
WHERE prev_od IS NOT NULL
GROUP BY customer_id
ORDER BY customer_id;



--wrong date format in date columns
SELECT order_id, order_date
FROM orders
WHERE order_date IS NULL
   OR TRIM(order_date) = ''
   OR LENGTH(order_date) != 10
   OR order_date NOT GLOB '20[0-9][0-9]-[0-1][0-9]-[0-3][0-9]';
   
   
   
--fix date issues
UPDATE shipping
SET 
    shipping_date = (
        SELECT so.shipping_date
        FROM shoe_orders_compiled so
        WHERE so.order_id = shipping.order_id);

		

--sentiments &amp; reviews		
CREATE VIEW top12_positive_review_pcnt AS
WITH top12 AS (
  SELECT customer_id
    FROM top12_repeat_buyers
)
SELECT
  r.sentiment_label,
  COUNT(*) AS cnt_reviews,
  ROUND(100.0 * COUNT(*) / SUM(COUNT(*)) OVER (), 2) AS percentage_review_cnt
FROM top12 t
JOIN orders o   ON o.customer_id = t.customer_id
JOIN reviews r  ON r.order_id    = o.order_id
GROUP BY r.sentiment_label;

--retention_rate &amp; customer_count
WITH customer_orders AS (
  SELECT customer_id, COUNT(*) AS order_count
  FROM corrected_shoe_orders_10k
  GROUP BY customer_id
)
SELECT 
  COUNT(*) AS total_customers,
  SUM(CASE WHEN order_count &gt; 1 THEN 1 ELSE 0 END) AS repeat_customers,
  ROUND(100.0 * SUM(CASE WHEN order_count &gt; 1 THEN 1 ELSE 0 END) / COUNT(*), 2) AS repeat_rate
FROM customer_orders;


SELECT customer_country,
	   count(order_id) orders
	   FROM corrected_shoe_orders_10k
	   GROUP BY customer_country
	   ORDER BY orders DESC;
	   

SELECT gender,
	   ROUND(AVG(age),2)
	   FROM corrected_shoe_orders_10k
	   GROUP BY gender;
	   
	   
SELECT gender,
	   COUNT(*) AS customer_distribution
	   FROM corrected_shoe_orders_10k
	   GROUP BY gender
	   ORDER BY customer_distribution DESC;
</sql><current_tab id="0"/></tab_sql></sqlb_project>
